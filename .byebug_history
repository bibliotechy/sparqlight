c
continue
c
quit
puts exception.backtrace
exception.backtrace
exception
n
s
c
b 34
quit
source_doc.to_hash.with_indifferent_access
source_doc.to_hash
source_doc
s
c
b 34
l
c
down
up
source_doc
s
document_model
c
b 34
self.document_model
n
solutions
c
endpoint
n
c
n
c
options.keys
options
n
c
n
c
up
exception
n
s
blacklight_config.response_model
c
exception
n
quit
res
blacklight_config.response_model
quit
puts exception.backtrace
exception
n
s
n
SPARQL.execute(query, @url, options).count
SPARQL.execute(query, @url, options)
n
@url
n
s
params.fetch(:query) % params
c
b 39
s
id
query
c
puts e.backtrace
e.backtrace
e.trace
e.bt
e
n
continue
c
repo.count
c
b 15
c
repo.count
n
c
disable breakpoints
disable
help
D 
c
n
s
args
sql
n
s
query
disp s
c
n
s
c
b 136
n
statements
s
n
s
n
s
reader
c
b 147
l
n
s
n
s
quit
repo.count
RDF::Reader.open("../rdf/etc/doap.ttl") {|r| repo << r}
RDF::Reader.open("../rdf/etc/doap.ttl").count
o.count
repo << RDF::Reader.open("../rdf/etc/doap.ttl")
repo.count
repo = Blacklight.default_index.connection.url
history
repo
n
repo
quit
connection.url
connection
connection.query("select ?s where {?s ?p ?o} LIMIT 1")
connection.query(q + " WHERE {?s ?p ?o}").empty?
connection.query(q + " WHERE {?s ?p ?o}")
connection.query(q).empty?
q = params.fetch(:query) % params
params.fetch(:query) % params
res.dump(:ttl)
res
n
c
b 39
quit
up
params
up
params
params.fetch(:query)
n
c
b 39
c
e
n
s
query % {id: id}
query % id
query
